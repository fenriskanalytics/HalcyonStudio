// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2p9VhVhxAWhB5Nusx9QUQ2
// Component: P_VWz6triYTO
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import HalcyonNavBar from "../../HalcyonNavBar"; // plasmic-import: yxQmGgAy9hde/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdPassword } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdPassword_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Checkbox from "../../Checkbox"; // plasmic-import: D2DzRkcO7hL6/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import HalcyonFooter from "../../HalcyonFooter"; // plasmic-import: 7Ks2sCBPZV9k/component
import HalcyonFooterBottom from "../../HalcyonFooterBottom"; // plasmic-import: Mjl6P60oGLT_/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2p9VhVhxAWhB5Nusx9QUQ2/projectcss
import sty from "./PlasmicRegistrationPage.module.css"; // plasmic-import: P_VWz6triYTO/css

createPlasmicElementProxy;

export const PlasmicRegistrationPage__VariantProps = new Array();

export const PlasmicRegistrationPage__ArgProps = new Array("addUser");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRegistrationPage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $translator = usePlasmicTranslator?.();
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "addPassword",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "passwordInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdPassword_Helpers)
      },
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <HalcyonNavBar
            data-plasmic-name={"halcyonNavBar"}
            data-plasmic-override={overrides.halcyonNavBar}
            className={classNames("__wab_instance", sty.halcyonNavBar)}
          />

          <div
            data-plasmic-name={"mainSection"}
            data-plasmic-override={overrides.mainSection}
            className={classNames(projectcss.all, sty.mainSection)}
          >
            <div
              data-plasmic-name={"mainSection2"}
              data-plasmic-override={overrides.mainSection2}
              className={classNames(projectcss.all, sty.mainSection2)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__ccn7M)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wbWy2
                  )}
                >
                  <Trans__>{"Member Login"}</Trans__>
                </div>
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form),
                    extendedOnValuesChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form", "value"],
                        FormWrapper_Helpers
                      ),
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],

                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onIsSubmittingChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form", "isSubmitting"],
                        FormWrapper_Helpers
                      ),
                    ref: ref => {
                      $refs["form"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form.isSubmitting"
                      }
                    ],

                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );
                  return (
                    <FormWrapper
                      data-plasmic-name={"form"}
                      data-plasmic-override={overrides.form}
                      {...child$Props}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__mdX1
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___40FKi
                            )}
                          >
                            <Trans__>{"Email"}</Trans__>
                          </div>
                        }
                        name={"username"}
                      >
                        {(() => {
                          const child$Props = {
                            bordered: true,
                            className: classNames("__wab_instance", sty.input),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input", "value"],
                                AntdInput_Helpers
                              ),
                            value: generateStateValueProp($state, [
                              "input",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"input"}
                              data-plasmic-override={overrides.input}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__u3Wtv
                        )}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__sVfwm
                            )}
                          >
                            <Trans__>{"Password"}</Trans__>
                          </div>
                        }
                        name={"password"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.passwordInput
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["passwordInput", "value"],
                                AntdPassword_Helpers
                              ),
                            value: generateStateValueProp($state, [
                              "passwordInput",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "passwordInput.value"
                              }
                            ],

                            [],
                            AntdPassword_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdPassword
                              data-plasmic-name={"passwordInput"}
                              data-plasmic-override={overrides.passwordInput}
                              {...child$Props}
                            />
                          );
                        })()}
                        <PlasmicLink__
                          data-plasmic-name={"link"}
                          data-plasmic-override={overrides.link}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link
                          )}
                          component={Link}
                          href={"https://www.plasmic.app/"}
                          platform={"nextjs"}
                        >
                          <Trans__>{"Forgot your Password?"}</Trans__>
                        </PlasmicLink__>
                      </FormItemWrapper>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cpMoz
                        )}
                      >
                        <Checkbox
                          data-plasmic-name={"checkbox"}
                          data-plasmic-override={overrides.checkbox}
                          className={classNames("__wab_instance", sty.checkbox)}
                          isChecked={
                            generateStateValueProp($state, [
                              "checkbox",
                              "isChecked"
                            ]) ?? false
                          }
                          onChange={(...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "checkbox",
                              "isChecked"
                            ])(eventArgs[0]);
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cfFzi
                            )}
                          >
                            <Trans__>{"Remember Me"}</Trans__>
                          </div>
                        </Checkbox>
                        <AntdButton
                          data-plasmic-name={"button"}
                          data-plasmic-override={overrides.button}
                          className={classNames("__wab_instance", sty.button)}
                          submitsForm={true}
                          type={"default"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bRoK
                            )}
                          >
                            <Trans__>{"Login"}</Trans__>
                          </div>
                        </AntdButton>
                      </div>
                    </FormWrapper>
                  );
                })()}
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___1481I)}>
            <HalcyonFooter
              data-plasmic-name={"halcyonFooter"}
              data-plasmic-override={overrides.halcyonFooter}
              className={classNames("__wab_instance", sty.halcyonFooter)}
            />

            <HalcyonFooterBottom
              data-plasmic-name={"halcyonFooterBottom"}
              data-plasmic-override={overrides.halcyonFooterBottom}
              className={classNames("__wab_instance", sty.halcyonFooterBottom)}
            />
          </div>
        </Stack__>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "halcyonNavBar",
    "mainSection",
    "mainSection2",
    "form",
    "input",
    "passwordInput",
    "link",
    "checkbox",
    "button",
    "halcyonFooter",
    "halcyonFooterBottom"
  ],

  halcyonNavBar: ["halcyonNavBar"],
  mainSection: [
    "mainSection",
    "mainSection2",
    "form",
    "input",
    "passwordInput",
    "link",
    "checkbox",
    "button"
  ],

  mainSection2: [
    "mainSection2",
    "form",
    "input",
    "passwordInput",
    "link",
    "checkbox",
    "button"
  ],

  form: ["form", "input", "passwordInput", "link", "checkbox", "button"],
  input: ["input"],
  passwordInput: ["passwordInput"],
  link: ["link"],
  checkbox: ["checkbox"],
  button: ["button"],
  halcyonFooter: ["halcyonFooter"],
  halcyonFooterBottom: ["halcyonFooterBottom"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRegistrationPage__ArgProps,
          internalVariantPropNames: PlasmicRegistrationPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRegistrationPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRegistrationPage";
  } else {
    func.displayName = `PlasmicRegistrationPage.${nodeName}`;
  }
  return func;
}

export const PlasmicRegistrationPage = Object.assign(
  // Top-level PlasmicRegistrationPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    halcyonNavBar: makeNodeComponent("halcyonNavBar"),
    mainSection: makeNodeComponent("mainSection"),
    mainSection2: makeNodeComponent("mainSection2"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    passwordInput: makeNodeComponent("passwordInput"),
    link: makeNodeComponent("link"),
    checkbox: makeNodeComponent("checkbox"),
    button: makeNodeComponent("button"),
    halcyonFooter: makeNodeComponent("halcyonFooter"),
    halcyonFooterBottom: makeNodeComponent("halcyonFooterBottom"),
    // Metadata about props expected for PlasmicRegistrationPage
    internalVariantProps: PlasmicRegistrationPage__VariantProps,
    internalArgProps: PlasmicRegistrationPage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicRegistrationPage;
/* prettier-ignore-end */
