// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2p9VhVhxAWhB5Nusx9QUQ2
// Component: H0Hexcqt6Sa7
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  usePlasmicTranslator
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariants_0QmF6MtAnaU } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: _0qmF6MTAnaU/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2p9VhVhxAWhB5Nusx9QUQ2/projectcss
import sty from "./PlasmicAboutUsSection.module.css"; // plasmic-import: H0Hexcqt6Sa7/css

createPlasmicElementProxy;

export const PlasmicAboutUsSection__VariantProps = new Array();

export const PlasmicAboutUsSection__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAboutUsSection__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $translator = usePlasmicTranslator?.();
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_0QmF6MtAnaU()
  });
  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__db1Pe)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__uNtf)}
          >
            <h2
              data-plasmic-name={"h2"}
              data-plasmic-override={overrides.h2}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2
              )}
            >
              <Trans__>
                {hasVariant(globalVariants, "screen", "mobile")
                  ? "The Halcyon Studio Story"
                  : "The Halcyon Studio Story"}
              </Trans__>
            </h2>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uSqGr
              )}
            >
              <Trans__>
                {
                  "The inspiration behind creating Halcyon Studio stems from my belief that all forms of movement can be profoundly healing, both physically and mentally. My goal is to offer a variety of classes to help you discover what makes you feel good and supports your well-being. My own healing journey has been transformative, and just a year ago, I never imagined I\u2019d be creating this space. Life can change in an instant, turning everything upside down, but it's crucial to get back up and continue striving for oneself. After facing several personal challenges, I found solace in movement, and support in my husband, family, and friends. Halcyon Studio came to life with these concepts as its core.\n\nWhen choosing the name, I wanted it to reflect something significant and aligned with the studio's purpose. That\u2019s why I chose \u201cHalcyon,\u201d a word that embodies the peace and tranquility I hope to bring to your life. Our focus is on movement and wellness, and we\u2019re continually looking to expand what we offer to support you on your journey. My primary intention is for you to walk through our doors, leave your worries behind, and dedicate time to caring for yourself\u2014moving in the way that feels right for you."
                }
              </Trans__>
            </div>
          </Stack__>
        </div>
        <div className={classNames(projectcss.all, sty.column__cia0)}>
          <div className={classNames(projectcss.all, sty.freeBox__eLfTk)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={
                hasVariant(globalVariants, "screen", "tablet")
                  ? "850px"
                  : "100%"
              }
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/copy_of_halcyon_studios/images/paulaBio2Jpg.jpg",
                fullWidth: 1665,
                fullHeight: 1733,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vcmB5
              )}
            >
              <Trans__>
                {hasVariant(globalVariants, "screen", "mobile")
                  ? "Paula Schoeppler, Owner & Founder\nof Halcyon Studios"
                  : hasVariant(globalVariants, "screen", "tablet")
                  ? "Paula Schoeppler \nOwner & Founder of Halcyon Studios"
                  : "Paula Schoeppler \nOwner / Founder Halcyon Studios"}
              </Trans__>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

const PlasmicDescendants = {
  root: ["root", "columns", "h2", "img"],
  columns: ["columns", "h2", "img"],
  h2: ["h2"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAboutUsSection__ArgProps,
          internalVariantPropNames: PlasmicAboutUsSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAboutUsSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAboutUsSection";
  } else {
    func.displayName = `PlasmicAboutUsSection.${nodeName}`;
  }
  return func;
}

export const PlasmicAboutUsSection = Object.assign(
  // Top-level PlasmicAboutUsSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    h2: makeNodeComponent("h2"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicAboutUsSection
    internalVariantProps: PlasmicAboutUsSection__VariantProps,
    internalArgProps: PlasmicAboutUsSection__ArgProps
  }
);

export default PlasmicAboutUsSection;
/* prettier-ignore-end */
