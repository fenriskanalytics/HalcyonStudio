// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2p9VhVhxAWhB5Nusx9QUQ2
// Component: BidW3xPGyJ_s
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: EyzplKTGD_DF/component
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2p9VhVhxAWhB5Nusx9QUQ2/projectcss
import sty from "./PlasmicUserInfoPage.module.css"; // plasmic-import: BidW3xPGyJ_s/css
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: j3whR53MQDz4/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: o0c7L_FzzkM5/icon

createPlasmicElementProxy;

export const PlasmicUserInfoPage__VariantProps = new Array();

export const PlasmicUserInfoPage__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUserInfoPage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $translator = usePlasmicTranslator?.();
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "antdInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Yoga Barbie",
        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "antdInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "18 Classes",
        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "antdInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Yoga Barbie",
        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "antdInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "18 Classes",
        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__qq2Ts)}>
            <div className={classNames(projectcss.all, sty.freeBox__oqPzT)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lyY8S)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hvbjj)}
                >
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__uathK
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2DXbe
                      )}
                    >
                      <Trans__>{"Halcyon Studios"}</Trans__>
                    </div>
                  </PlasmicLink__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ec67V)}
                  >
                    <Stack__
                      as={PlasmicLink__}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__pnG3T
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jTynV
                        )}
                      >
                        <Trans__>{"About Us"}</Trans__>
                      </div>
                    </Stack__>
                    <Stack__
                      as={PlasmicLink__}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__fQuRj
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nntrV
                        )}
                      >
                        <Trans__>{"Features"}</Trans__>
                      </div>
                    </Stack__>
                    <Stack__
                      as={PlasmicLink__}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__buGvI
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2MiB
                        )}
                      >
                        <Trans__>{"Pricing "}</Trans__>
                      </div>
                    </Stack__>
                    <Stack__
                      as={PlasmicLink__}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link___3P9NN
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7Wzex
                        )}
                      >
                        <Trans__>{"Contact"}</Trans__>
                      </div>
                    </Stack__>
                    <Stack__
                      as={PlasmicLink__}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__xFcUy
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__f0Auq
                        )}
                      >
                        <Trans__>{"Blog"}</Trans__>
                      </div>
                    </Stack__>
                    <Button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      endIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__eBt2)}
                          role={"img"}
                        />
                      }
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__mxS5B)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    />
                  </Stack__>
                </Stack__>
              </Stack__>
            </div>
          </div>
          <div
            data-plasmic-name={"mainSection"}
            data-plasmic-override={overrides.mainSection}
            className={classNames(projectcss.all, sty.mainSection)}
          >
            <div
              data-plasmic-name={"mainSection2"}
              data-plasmic-override={overrides.mainSection2}
              className={classNames(projectcss.all, sty.mainSection2)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__piGu4)}>
                <div className={classNames(projectcss.all, sty.freeBox__qmpgM)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__t0Ixy
                    )}
                  >
                    <Trans__>{"Welcome Back"}</Trans__>
                  </div>
                  {(() => {
                    const child$Props = {
                      allowClear: false,
                      className: classNames("__wab_instance", sty.antdInput),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["antdInput", "value"],
                        Input_Helpers
                      ),
                      size: "middle",
                      value: generateStateValueProp($state, [
                        "antdInput",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "antdInput.value"
                        }
                      ],

                      [],
                      Input_Helpers ?? {},
                      child$Props
                    );
                    return (
                      <Input
                        data-plasmic-name={"antdInput"}
                        data-plasmic-override={overrides.antdInput}
                        {...child$Props}
                      />
                    );
                  })()}
                  <div
                    className={classNames(projectcss.all, sty.freeBox___67XBd)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fpB1D
                      )}
                    >
                      <Trans__>{"Congratulations, You've Completed"}</Trans__>
                    </div>
                    {(() => {
                      const child$Props = {
                        allowClear: false,
                        className: classNames("__wab_instance", sty.antdInput2),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["antdInput2", "value"],
                          Input_Helpers
                        ),
                        size: "middle",
                        value: generateStateValueProp($state, [
                          "antdInput2",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "antdInput2.value"
                          }
                        ],

                        [],
                        Input_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <Input
                          data-plasmic-name={"antdInput2"}
                          data-plasmic-override={overrides.antdInput2}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__tDpN6)}>
                  <Embed
                    data-plasmic-name={"embedHtml"}
                    data-plasmic-override={overrides.embedHtml}
                    className={classNames("__wab_instance", sty.embedHtml)}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hLyWm
                    )}
                  >
                    <Trans__>{"Current Membership Level"}</Trans__>
                  </div>
                  {(() => {
                    const child$Props = {
                      allowClear: false,
                      className: classNames("__wab_instance", sty.antdInput3),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["antdInput3", "value"],
                        Input_Helpers
                      ),
                      size: "middle",
                      value: generateStateValueProp($state, [
                        "antdInput3",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "antdInput3.value"
                        }
                      ],

                      [],
                      Input_Helpers ?? {},
                      child$Props
                    );
                    return (
                      <Input
                        data-plasmic-name={"antdInput3"}
                        data-plasmic-override={overrides.antdInput3}
                        {...child$Props}
                      />
                    );
                  })()}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qPfS)}
                  >
                    {(() => {
                      const child$Props = {
                        allowClear: false,
                        className: classNames("__wab_instance", sty.antdInput4),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["antdInput4", "value"],
                          Input_Helpers
                        ),
                        size: "middle",
                        value: generateStateValueProp($state, [
                          "antdInput4",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "antdInput4.value"
                          }
                        ],

                        [],
                        Input_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <Input
                          data-plasmic-name={"antdInput4"}
                          data-plasmic-override={overrides.antdInput4}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__thBx6)}>
            <div
              data-plasmic-name={"footerTop"}
              data-plasmic-override={overrides.footerTop}
              className={classNames(projectcss.all, sty.footerTop)}
            >
              <div
                data-plasmic-name={"container"}
                data-plasmic-override={overrides.container}
                className={classNames(projectcss.all, sty.container)}
              >
                <div className={classNames(projectcss.all, sty.columns__cysKq)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column___6OCww)}
                  >
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__zCx4Y)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7Mmes
                      )}
                    >
                      <Trans__>
                        {
                          "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s"
                        }
                      </Trans__>
                    </div>
                  </Stack__>
                  <div
                    className={classNames(projectcss.all, sty.column__jcL8K)}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__rgist
                      )}
                    >
                      <Trans__>{"Menu"}</Trans__>
                    </h5>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__urjAn
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      <Trans__>{"Privacy Policy"}</Trans__>
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__rgpSn
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      <Trans__>{"Terms of Service"}</Trans__>
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__qt3Yb
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      <Trans__>{"Pricing "}</Trans__>
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__gYkzz
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      <Trans__>{"Contact"}</Trans__>
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__nvVHe
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      <Trans__>{"Blog"}</Trans__>
                    </PlasmicLink__>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__izSeG)}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__z4TOj
                      )}
                    >
                      <Trans__>{"Gallery"}</Trans__>
                    </h5>
                    <div
                      className={classNames(projectcss.all, sty.columns__ggE68)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___2GvhW
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__rupvo)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/copy_of_halcyon_studios/images/image4.jpg",
                            fullWidth: 390,
                            fullHeight: 290,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__lX1Is
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___9Ucuw)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/copy_of_halcyon_studios/images/image5.jpg",
                            fullWidth: 390,
                            fullHeight: 290,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__sxoem
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__c62Rj)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/copy_of_halcyon_studios/images/image6.jpg",
                            fullWidth: 390,
                            fullHeight: 290,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.columns___4DXpl
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__lSoRo
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__ueijP)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/copy_of_halcyon_studios/images/image4.jpg",
                            fullWidth: 390,
                            fullHeight: 290,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__v0V3D
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__mzBMp)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/copy_of_halcyon_studios/images/image5.jpg",
                            fullWidth: 390,
                            fullHeight: 290,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__tSxXm
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__rlA5L)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/copy_of_halcyon_studios/images/image6.jpg",
                            fullWidth: 390,
                            fullHeight: 290,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"footerBottom"}
              data-plasmic-override={overrides.footerBottom}
              className={classNames(projectcss.all, sty.footerBottom)}
            >
              <div
                data-plasmic-name={"container2"}
                data-plasmic-override={overrides.container2}
                className={classNames(projectcss.all, sty.container2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nAiit
                  )}
                >
                  <Trans__>
                    {
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "\u00a9 Company Name. All rights reserved. This site proudly built with "
                          }
                        </React.Fragment>
                        {
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__c7CrB
                            )}
                            component={Link}
                            href={"https://www.plasmic.app/"}
                            platform={"nextjs"}
                          >
                            {"Plasmic"}
                          </PlasmicLink__>
                        }

                        <React.Fragment>{"."}</React.Fragment>
                      </React.Fragment>
                    }
                  </Trans__>
                </div>
              </div>
            </div>
          </div>
        </Stack__>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "button",
    "mainSection",
    "mainSection2",
    "antdInput",
    "antdInput2",
    "embedHtml",
    "antdInput3",
    "antdInput4",
    "footerTop",
    "container",
    "footerBottom",
    "container2"
  ],

  button: ["button"],
  mainSection: [
    "mainSection",
    "mainSection2",
    "antdInput",
    "antdInput2",
    "embedHtml",
    "antdInput3",
    "antdInput4"
  ],

  mainSection2: [
    "mainSection2",
    "antdInput",
    "antdInput2",
    "embedHtml",
    "antdInput3",
    "antdInput4"
  ],

  antdInput: ["antdInput"],
  antdInput2: ["antdInput2"],
  embedHtml: ["embedHtml"],
  antdInput3: ["antdInput3"],
  antdInput4: ["antdInput4"],
  footerTop: ["footerTop", "container"],
  container: ["container"],
  footerBottom: ["footerBottom", "container2"],
  container2: ["container2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUserInfoPage__ArgProps,
          internalVariantPropNames: PlasmicUserInfoPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUserInfoPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUserInfoPage";
  } else {
    func.displayName = `PlasmicUserInfoPage.${nodeName}`;
  }
  return func;
}

export const PlasmicUserInfoPage = Object.assign(
  // Top-level PlasmicUserInfoPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    mainSection: makeNodeComponent("mainSection"),
    mainSection2: makeNodeComponent("mainSection2"),
    antdInput: makeNodeComponent("antdInput"),
    antdInput2: makeNodeComponent("antdInput2"),
    embedHtml: makeNodeComponent("embedHtml"),
    antdInput3: makeNodeComponent("antdInput3"),
    antdInput4: makeNodeComponent("antdInput4"),
    footerTop: makeNodeComponent("footerTop"),
    container: makeNodeComponent("container"),
    footerBottom: makeNodeComponent("footerBottom"),
    container2: makeNodeComponent("container2"),
    // Metadata about props expected for PlasmicUserInfoPage
    internalVariantProps: PlasmicUserInfoPage__VariantProps,
    internalArgProps: PlasmicUserInfoPage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicUserInfoPage;
/* prettier-ignore-end */
