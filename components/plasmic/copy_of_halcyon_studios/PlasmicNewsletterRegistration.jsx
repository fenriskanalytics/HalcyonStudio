// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2p9VhVhxAWhB5Nusx9QUQ2
// Component: qw7tQ-F1Iyxa
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  set as $stateSet,
  useDollarState,
  usePlasmicTranslator
} from "@plasmicapp/react-web";
import { useDataEnv, useGlobalActions } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import HalcyonNavBar from "../../HalcyonNavBar"; // plasmic-import: yxQmGgAy9hde/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Checkbox from "../../Checkbox"; // plasmic-import: D2DzRkcO7hL6/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Button from "../../Button"; // plasmic-import: EyzplKTGD_DF/component
import HalcyonFooter from "../../HalcyonFooter"; // plasmic-import: 7Ks2sCBPZV9k/component
import HalcyonFooterBottom from "../../HalcyonFooterBottom"; // plasmic-import: Mjl6P60oGLT_/component
import { useScreenVariants as useScreenVariants_0QmF6MtAnaU } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: _0qmF6MTAnaU/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2p9VhVhxAWhB5Nusx9QUQ2/projectcss
import sty from "./PlasmicNewsletterRegistration.module.css"; // plasmic-import: qw7tQ-F1Iyxa/css

createPlasmicElementProxy;

export const PlasmicNewsletterRegistration__VariantProps = new Array();

export const PlasmicNewsletterRegistration__ArgProps = new Array("goToPage");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewsletterRegistration__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $translator = usePlasmicTranslator?.();
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const $globalActions = useGlobalActions?.();
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "registrationForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "registrationForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "formSubmitted",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "registrationForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "registrationForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "checkbox2.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "registrationForm2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "registrationForm2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "registrationForm2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "registrationForm2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "numberInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "checkbox3.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_0QmF6MtAnaU()
  });
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {PlasmicNewsletterRegistration.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicNewsletterRegistration.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicNewsletterRegistration.pageMetadata.title}
        />

        <meta
          key="description"
          name="description"
          content={PlasmicNewsletterRegistration.pageMetadata.description}
        />

        <meta
          key="og:description"
          property="og:description"
          content={PlasmicNewsletterRegistration.pageMetadata.description}
        />

        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicNewsletterRegistration.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <HalcyonNavBar
            data-plasmic-name={"halcyonNavBar"}
            data-plasmic-override={overrides.halcyonNavBar}
            className={classNames("__wab_instance", sty.halcyonNavBar)}
          />

          <div
            data-plasmic-name={"mainSection"}
            data-plasmic-override={overrides.mainSection}
            className={classNames(projectcss.all, sty.mainSection)}
          >
            <div
              data-plasmic-name={"mainSection2"}
              data-plasmic-override={overrides.mainSection2}
              className={classNames(projectcss.all, sty.mainSection2)}
            >
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__uUYnx)}>
                  <div
                    data-plasmic-name={"container4"}
                    data-plasmic-override={overrides.container4}
                    className={classNames(projectcss.all, sty.container4)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__lP5T
                      )}
                    >
                      <Trans__>{"Grand Opening Announcements"}</Trans__>
                    </h2>
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.registrationForm
                        ),
                        extendedOnValuesChange:
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["registrationForm", "value"],
                            FormWrapper_Helpers
                          ),
                        formItems: [
                          { label: "Name", name: "name", inputType: "Text" },
                          {
                            label: "Message",
                            name: "message",
                            inputType: "Text Area"
                          }
                        ],

                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "advanced",
                        onFinish: async values => {
                          const $steps = {};
                          $steps["defaultSubmit"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "fTrurUrFZkyrzYqqRzuBF",
                                    opId: "dbd0e6ed-21d5-43d4-962e-67e173633156",
                                    userArgs: {
                                      variables: [$state.registrationForm.value]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["defaultSubmit"] != null &&
                            typeof $steps["defaultSubmit"] === "object" &&
                            typeof $steps["defaultSubmit"].then === "function"
                          ) {
                            $steps["defaultSubmit"] = await $steps[
                              "defaultSubmit"
                            ];
                          }
                          $steps["showNotification"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "success",
                                    "Thank you for registering!",
                                    ``,
                                    5,
                                    "top"
                                  ]
                                };
                                return $globalActions[
                                  "plasmic-antd5-config-provider.showNotification"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["showNotification"] != null &&
                            typeof $steps["showNotification"] === "object" &&
                            typeof $steps["showNotification"].then ===
                              "function"
                          ) {
                            $steps["showNotification"] = await $steps[
                              "showNotification"
                            ];
                          }
                          $steps["runActionOnRegistrationForm"] = true
                            ? (() => {
                                const actionArgs = {
                                  tplRef: "registrationForm",
                                  action: "resetFields"
                                };
                                return (({ tplRef, action, args }) => {
                                  return $refs?.[tplRef]?.[action]?.(
                                    ...(args ?? [])
                                  );
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runActionOnRegistrationForm"] != null &&
                            typeof $steps["runActionOnRegistrationForm"] ===
                              "object" &&
                            typeof $steps["runActionOnRegistrationForm"]
                              .then === "function"
                          ) {
                            $steps["runActionOnRegistrationForm"] =
                              await $steps["runActionOnRegistrationForm"];
                          }
                          $steps["updateFormSubmitted"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["formSubmitted"]
                                  },
                                  operation: 0,
                                  value: ($state.formSubmitted = true)
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;
                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateFormSubmitted"] != null &&
                            typeof $steps["updateFormSubmitted"] === "object" &&
                            typeof $steps["updateFormSubmitted"].then ===
                              "function"
                          ) {
                            $steps["updateFormSubmitted"] = await $steps[
                              "updateFormSubmitted"
                            ];
                          }
                          $steps["updateVariable2"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["variable2"]
                                  },
                                  operation: 0
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;
                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateVariable2"] != null &&
                            typeof $steps["updateVariable2"] === "object" &&
                            typeof $steps["updateVariable2"].then === "function"
                          ) {
                            $steps["updateVariable2"] = await $steps[
                              "updateVariable2"
                            ];
                          }
                        },
                        onFinishFailed: async data => {
                          const $steps = {};
                          $steps["showNotification"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "Please correct your entry",
                                    ``,
                                    undefined,
                                    undefined
                                  ]
                                };
                                return $globalActions[
                                  "plasmic-antd5-config-provider.showNotification"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["showNotification"] != null &&
                            typeof $steps["showNotification"] === "object" &&
                            typeof $steps["showNotification"].then ===
                              "function"
                          ) {
                            $steps["showNotification"] = await $steps[
                              "showNotification"
                            ];
                          }
                        },
                        onIsSubmittingChange:
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "isSubmitting",
                            ["registrationForm", "isSubmitting"],
                            FormWrapper_Helpers
                          ),
                        ref: ref => {
                          $refs["registrationForm"] = ref;
                        },
                        submitSlot: null,
                        validateTrigger: ["onSubmit"],
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "registrationForm.value"
                          },
                          {
                            name: "isSubmitting",
                            plasmicStateName: "registrationForm.isSubmitting"
                          }
                        ],

                        [],
                        FormWrapper_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <FormWrapper
                          data-plasmic-name={"registrationForm"}
                          data-plasmic-override={overrides.registrationForm}
                          {...child$Props}
                        >
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__u4Fep
                            )}
                            hidden={true}
                            initialValue={undefined}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___8JmWq
                                )}
                              >
                                <Trans__>{"id"}</Trans__>
                              </div>
                            }
                            name={"id"}
                          >
                            <AntdInputNumber
                              data-plasmic-name={"numberInput"}
                              data-plasmic-override={overrides.numberInput}
                              className={classNames(
                                "__wab_instance",
                                sty.numberInput
                              )}
                              onChange={generateStateOnChangeProp($state, [
                                "numberInput",
                                "value"
                              ])}
                              type={"number"}
                              value={generateStateValueProp($state, [
                                "numberInput",
                                "value"
                              ])}
                            />
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"firstName"}
                            data-plasmic-override={overrides.firstName}
                            className={classNames(
                              "__wab_instance",
                              sty.firstName
                            )}
                            initialValue={undefined}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__f2DwT
                                )}
                              >
                                <Trans__>{"First Name"}</Trans__>
                              </div>
                            }
                            name={"first_name"}
                            rules={[
                              {
                                ruleType: "required",
                                message: "Please enter your name"
                              }
                            ]}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input2
                                ),
                                onChange:
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input2", "value"],
                                    AntdInput_Helpers
                                  ),
                                size: "large",
                                value: generateStateValueProp($state, [
                                  "input2",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input2.value"
                                  }
                                ],

                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );
                              return (
                                <AntdInput
                                  data-plasmic-name={"input2"}
                                  data-plasmic-override={overrides.input2}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"lastName"}
                            data-plasmic-override={overrides.lastName}
                            className={classNames(
                              "__wab_instance",
                              sty.lastName
                            )}
                            initialValue={undefined}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__iXoDh
                                )}
                              >
                                <Trans__>{"Last Name"}</Trans__>
                              </div>
                            }
                            name={"last_name"}
                            rules={[
                              {
                                ruleType: "required",
                                message: "Please enter your name"
                              }
                            ]}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input3
                                ),
                                onChange:
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input3", "value"],
                                    AntdInput_Helpers
                                  ),
                                size: "large",
                                value: generateStateValueProp($state, [
                                  "input3",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input3.value"
                                  }
                                ],

                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );
                              return (
                                <AntdInput
                                  data-plasmic-name={"input3"}
                                  data-plasmic-override={overrides.input3}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"email"}
                            data-plasmic-override={overrides.email}
                            className={classNames("__wab_instance", sty.email)}
                            initialValue={undefined}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__blw6E
                                )}
                              >
                                <Trans__>{"Email"}</Trans__>
                              </div>
                            }
                            name={"email"}
                            rules={[
                              {
                                ruleType: "advanced",
                                custom: (rule, value) => {
                                  return (() => {
                                    const emailRegex =
                                      /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                                    const isValidEmail = emailRegex.test(value);
                                    return isValidEmail;
                                  })();
                                },
                                message: "Please Enter a Valid Email"
                              }
                            ]}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input
                                ),
                                onChange:
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input", "value"],
                                    AntdInput_Helpers
                                  ),
                                size: "large",
                                value: generateStateValueProp($state, [
                                  "input",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input.value"
                                  }
                                ],

                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );
                              return (
                                <AntdInput
                                  data-plasmic-name={"input"}
                                  data-plasmic-override={overrides.input}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.formField__z1W3H
                            )}
                            hidden={true}
                            initialValue={undefined}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__pkqys
                                )}
                              >
                                <Trans__>{"created_at"}</Trans__>
                              </div>
                            }
                            name={"created_at"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input4
                                ),
                                onChange:
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input4", "value"],
                                    AntdInput_Helpers
                                  ),
                                value: generateStateValueProp($state, [
                                  "input4",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input4.value"
                                  }
                                ],

                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );
                              return (
                                <AntdInput
                                  data-plasmic-name={"input4"}
                                  data-plasmic-override={overrides.input4}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <Checkbox
                            data-plasmic-name={"checkbox2"}
                            data-plasmic-override={overrides.checkbox2}
                            className={classNames(
                              "__wab_instance",
                              sty.checkbox2
                            )}
                            isChecked={
                              generateStateValueProp($state, [
                                "checkbox2",
                                "isChecked"
                              ]) ?? false
                            }
                            onChange={(...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "checkbox2",
                                "isChecked"
                              ])(eventArgs[0]);
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9OxuX
                              )}
                            >
                              <Trans__>
                                {
                                  "Please send me early registration discounts and promotions"
                                }
                              </Trans__>
                            </div>
                          </Checkbox>
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__yGaK2
                            )}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xPbdh
                              )}
                            >
                              <Trans__>{"Submit"}</Trans__>
                            </div>
                          </AntdButton>
                        </FormWrapper>
                      );
                    })()}
                    {(() => {
                      try {
                        return $state.formSubmitted;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___0CNqc
                        )}
                        color={"unnamedVariant"}
                        onClick={async event => {
                          const $steps = {};
                          $steps["goToHomepage"] = true
                            ? (() => {
                                const actionArgs = { destination: `/home` };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToHomepage"] != null &&
                            typeof $steps["goToHomepage"] === "object" &&
                            typeof $steps["goToHomepage"].then === "function"
                          ) {
                            $steps["goToHomepage"] = await $steps[
                              "goToHomepage"
                            ];
                          }
                        }}
                      >
                        <Trans__>{"Return Home"}</Trans__>
                      </Button>
                    ) : null}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column___3HGaL)}>
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/copy_of_halcyon_studios/images/halcyonAngleViewjpg.jpg",
                      fullWidth: 3840,
                      fullHeight: 2160,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              ) ? (
                <div
                  data-plasmic-name={"container5"}
                  data-plasmic-override={overrides.container5}
                  className={classNames(projectcss.all, sty.container5)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__kAzJv
                    )}
                  >
                    <Trans__>{"Grand Opening Announcements"}</Trans__>
                  </h2>
                  {(() => {
                    const child$Props = {
                      className: classNames(
                        "__wab_instance",
                        sty.registrationForm2
                      ),
                      extendedOnValuesChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["registrationForm2", "value"],
                          FormWrapper_Helpers
                        ),
                      formItems: [
                        { label: "Name", name: "name", inputType: "Text" },
                        {
                          label: "Message",
                          name: "message",
                          inputType: "Text Area"
                        }
                      ],

                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical",
                      mode: "advanced",
                      onFinish: async values => {
                        const $steps = {};
                        $steps["defaultSubmit"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "fTrurUrFZkyrzYqqRzuBF",
                                  opId: "dbd0e6ed-21d5-43d4-962e-67e173633156",
                                  userArgs: {
                                    variables: [$state.registrationForm2.value]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["defaultSubmit"] != null &&
                          typeof $steps["defaultSubmit"] === "object" &&
                          typeof $steps["defaultSubmit"].then === "function"
                        ) {
                          $steps["defaultSubmit"] = await $steps[
                            "defaultSubmit"
                          ];
                        }
                        $steps["showNotification"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "success",
                                  "Thank you for registering!",
                                  ``,
                                  5,
                                  "top"
                                ]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["showNotification"] != null &&
                          typeof $steps["showNotification"] === "object" &&
                          typeof $steps["showNotification"].then === "function"
                        ) {
                          $steps["showNotification"] = await $steps[
                            "showNotification"
                          ];
                        }
                        $steps["runActionOnRegistrationForm"] = true
                          ? (() => {
                              const actionArgs = {
                                tplRef: "registrationForm",
                                action: "resetFields"
                              };
                              return (({ tplRef, action, args }) => {
                                return $refs?.[tplRef]?.[action]?.(
                                  ...(args ?? [])
                                );
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runActionOnRegistrationForm"] != null &&
                          typeof $steps["runActionOnRegistrationForm"] ===
                            "object" &&
                          typeof $steps["runActionOnRegistrationForm"].then ===
                            "function"
                        ) {
                          $steps["runActionOnRegistrationForm"] = await $steps[
                            "runActionOnRegistrationForm"
                          ];
                        }
                        $steps["updateFormSubmitted"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["formSubmitted"]
                                },
                                operation: 0,
                                value: ($state.formSubmitted = true)
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;
                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateFormSubmitted"] != null &&
                          typeof $steps["updateFormSubmitted"] === "object" &&
                          typeof $steps["updateFormSubmitted"].then ===
                            "function"
                        ) {
                          $steps["updateFormSubmitted"] = await $steps[
                            "updateFormSubmitted"
                          ];
                        }
                        $steps["updateVariable2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["variable2"]
                                },
                                operation: 0
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;
                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateVariable2"] != null &&
                          typeof $steps["updateVariable2"] === "object" &&
                          typeof $steps["updateVariable2"].then === "function"
                        ) {
                          $steps["updateVariable2"] = await $steps[
                            "updateVariable2"
                          ];
                        }
                      },
                      onFinishFailed: async data => {
                        const $steps = {};
                        $steps["showNotification"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "Please correct your entry",
                                  ``,
                                  undefined,
                                  undefined
                                ]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["showNotification"] != null &&
                          typeof $steps["showNotification"] === "object" &&
                          typeof $steps["showNotification"].then === "function"
                        ) {
                          $steps["showNotification"] = await $steps[
                            "showNotification"
                          ];
                        }
                      },
                      onIsSubmittingChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["registrationForm2", "isSubmitting"],
                          FormWrapper_Helpers
                        ),
                      ref: ref => {
                        $refs["registrationForm2"] = ref;
                      },
                      submitSlot: null,
                      validateTrigger: ["onSubmit"],
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "registrationForm2.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "registrationForm2.isSubmitting"
                        }
                      ],

                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );
                    return (
                      <FormWrapper
                        data-plasmic-name={"registrationForm2"}
                        data-plasmic-override={overrides.registrationForm2}
                        {...child$Props}
                      >
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__z54Cd
                          )}
                          hidden={true}
                          initialValue={undefined}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___15HiF
                              )}
                            >
                              <Trans__>{"id"}</Trans__>
                            </div>
                          }
                          name={"id"}
                        >
                          <AntdInputNumber
                            data-plasmic-name={"numberInput2"}
                            data-plasmic-override={overrides.numberInput2}
                            className={classNames(
                              "__wab_instance",
                              sty.numberInput2
                            )}
                            onChange={generateStateOnChangeProp($state, [
                              "numberInput2",
                              "value"
                            ])}
                            type={"number"}
                            value={generateStateValueProp($state, [
                              "numberInput2",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                        <FormItemWrapper
                          data-plasmic-name={"firstName2"}
                          data-plasmic-override={overrides.firstName2}
                          className={classNames(
                            "__wab_instance",
                            sty.firstName2
                          )}
                          initialValue={undefined}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vOaCj
                              )}
                            >
                              <Trans__>{"First Name"}</Trans__>
                            </div>
                          }
                          name={"first_name"}
                          rules={[
                            {
                              ruleType: "required",
                              message: "Please enter your name"
                            }
                          ]}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input5
                              ),
                              onChange:
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input5", "value"],
                                  AntdInput_Helpers
                                ),
                              size: "large",
                              value: generateStateValueProp($state, [
                                "input5",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input5.value"
                                }
                              ],

                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );
                            return (
                              <AntdInput
                                data-plasmic-name={"input5"}
                                data-plasmic-override={overrides.input5}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          data-plasmic-name={"lastName2"}
                          data-plasmic-override={overrides.lastName2}
                          className={classNames(
                            "__wab_instance",
                            sty.lastName2
                          )}
                          initialValue={undefined}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___094Ju
                              )}
                            >
                              <Trans__>{"Last Name"}</Trans__>
                            </div>
                          }
                          name={"last_name"}
                          rules={[
                            {
                              ruleType: "required",
                              message: "Please enter your name"
                            }
                          ]}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input6
                              ),
                              onChange:
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input6", "value"],
                                  AntdInput_Helpers
                                ),
                              size: "large",
                              value: generateStateValueProp($state, [
                                "input6",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input6.value"
                                }
                              ],

                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );
                            return (
                              <AntdInput
                                data-plasmic-name={"input6"}
                                data-plasmic-override={overrides.input6}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          data-plasmic-name={"email2"}
                          data-plasmic-override={overrides.email2}
                          className={classNames("__wab_instance", sty.email2)}
                          initialValue={undefined}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yLtVs
                              )}
                            >
                              <Trans__>{"Email"}</Trans__>
                            </div>
                          }
                          name={"email"}
                          rules={[
                            {
                              ruleType: "advanced",
                              custom: (rule, value) => {
                                return (() => {
                                  const emailRegex =
                                    /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                                  const isValidEmail = emailRegex.test(value);
                                  return isValidEmail;
                                })();
                              },
                              message: "Please Enter a Valid Email"
                            }
                          ]}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input7
                              ),
                              onChange:
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input7", "value"],
                                  AntdInput_Helpers
                                ),
                              size: "large",
                              value: generateStateValueProp($state, [
                                "input7",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input7.value"
                                }
                              ],

                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );
                            return (
                              <AntdInput
                                data-plasmic-name={"input7"}
                                data-plasmic-override={overrides.input7}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <FormItemWrapper
                          className={classNames(
                            "__wab_instance",
                            sty.formField__yh0H5
                          )}
                          hidden={true}
                          initialValue={undefined}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pu4Po
                              )}
                            >
                              <Trans__>{"created_at"}</Trans__>
                            </div>
                          }
                          name={"created_at"}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input8
                              ),
                              onChange:
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input8", "value"],
                                  AntdInput_Helpers
                                ),
                              value: generateStateValueProp($state, [
                                "input8",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input8.value"
                                }
                              ],

                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );
                            return (
                              <AntdInput
                                data-plasmic-name={"input8"}
                                data-plasmic-override={overrides.input8}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <Checkbox
                          data-plasmic-name={"checkbox3"}
                          data-plasmic-override={overrides.checkbox3}
                          className={classNames(
                            "__wab_instance",
                            sty.checkbox3
                          )}
                          isChecked={
                            generateStateValueProp($state, [
                              "checkbox3",
                              "isChecked"
                            ]) ?? false
                          }
                          onChange={(...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "checkbox3",
                              "isChecked"
                            ])(eventArgs[0]);
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zZcc3
                            )}
                          >
                            <Trans__>
                              {
                                "Please send me early registration discounts and promotions"
                              }
                            </Trans__>
                          </div>
                        </Checkbox>
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__s8Sfg
                          )}
                          submitsForm={true}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__j1Rj5
                            )}
                          >
                            <Trans__>{"Submit"}</Trans__>
                          </div>
                        </AntdButton>
                      </FormWrapper>
                    );
                  })()}
                  {(() => {
                    try {
                      return $state.formSubmitted;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__o4ZuT
                      )}
                      color={"unnamedVariant"}
                      onClick={async event => {
                        const $steps = {};
                        $steps["goToHomepage"] = true
                          ? (() => {
                              const actionArgs = { destination: `/home` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToHomepage"] != null &&
                          typeof $steps["goToHomepage"] === "object" &&
                          typeof $steps["goToHomepage"].then === "function"
                        ) {
                          $steps["goToHomepage"] = await $steps["goToHomepage"];
                        }
                      }}
                    >
                      <Trans__>{"Return Home"}</Trans__>
                    </Button>
                  ) : null}
                </div>
              ) : null}
            </div>
          </div>
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <HalcyonFooter
              data-plasmic-name={"halcyonFooter"}
              data-plasmic-override={overrides.halcyonFooter}
              className={classNames("__wab_instance", sty.halcyonFooter)}
            />

            <HalcyonFooterBottom
              data-plasmic-name={"halcyonFooterBottom"}
              data-plasmic-override={overrides.halcyonFooterBottom}
              className={classNames("__wab_instance", sty.halcyonFooterBottom)}
            />
          </div>
        </Stack__>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "halcyonNavBar",
    "mainSection",
    "mainSection2",
    "columns",
    "container4",
    "registrationForm",
    "numberInput",
    "firstName",
    "input2",
    "lastName",
    "input3",
    "email",
    "input",
    "input4",
    "checkbox2",
    "img",
    "container5",
    "registrationForm2",
    "numberInput2",
    "firstName2",
    "input5",
    "lastName2",
    "input6",
    "email2",
    "input7",
    "input8",
    "checkbox3",
    "freeBox",
    "halcyonFooter",
    "halcyonFooterBottom"
  ],

  halcyonNavBar: ["halcyonNavBar"],
  mainSection: [
    "mainSection",
    "mainSection2",
    "columns",
    "container4",
    "registrationForm",
    "numberInput",
    "firstName",
    "input2",
    "lastName",
    "input3",
    "email",
    "input",
    "input4",
    "checkbox2",
    "img",
    "container5",
    "registrationForm2",
    "numberInput2",
    "firstName2",
    "input5",
    "lastName2",
    "input6",
    "email2",
    "input7",
    "input8",
    "checkbox3"
  ],

  mainSection2: [
    "mainSection2",
    "columns",
    "container4",
    "registrationForm",
    "numberInput",
    "firstName",
    "input2",
    "lastName",
    "input3",
    "email",
    "input",
    "input4",
    "checkbox2",
    "img",
    "container5",
    "registrationForm2",
    "numberInput2",
    "firstName2",
    "input5",
    "lastName2",
    "input6",
    "email2",
    "input7",
    "input8",
    "checkbox3"
  ],

  columns: [
    "columns",
    "container4",
    "registrationForm",
    "numberInput",
    "firstName",
    "input2",
    "lastName",
    "input3",
    "email",
    "input",
    "input4",
    "checkbox2",
    "img"
  ],

  container4: [
    "container4",
    "registrationForm",
    "numberInput",
    "firstName",
    "input2",
    "lastName",
    "input3",
    "email",
    "input",
    "input4",
    "checkbox2"
  ],

  registrationForm: [
    "registrationForm",
    "numberInput",
    "firstName",
    "input2",
    "lastName",
    "input3",
    "email",
    "input",
    "input4",
    "checkbox2"
  ],

  numberInput: ["numberInput"],
  firstName: ["firstName", "input2"],
  input2: ["input2"],
  lastName: ["lastName", "input3"],
  input3: ["input3"],
  email: ["email", "input"],
  input: ["input"],
  input4: ["input4"],
  checkbox2: ["checkbox2"],
  img: ["img"],
  container5: [
    "container5",
    "registrationForm2",
    "numberInput2",
    "firstName2",
    "input5",
    "lastName2",
    "input6",
    "email2",
    "input7",
    "input8",
    "checkbox3"
  ],

  registrationForm2: [
    "registrationForm2",
    "numberInput2",
    "firstName2",
    "input5",
    "lastName2",
    "input6",
    "email2",
    "input7",
    "input8",
    "checkbox3"
  ],

  numberInput2: ["numberInput2"],
  firstName2: ["firstName2", "input5"],
  input5: ["input5"],
  lastName2: ["lastName2", "input6"],
  input6: ["input6"],
  email2: ["email2", "input7"],
  input7: ["input7"],
  input8: ["input8"],
  checkbox3: ["checkbox3"],
  freeBox: ["freeBox", "halcyonFooter", "halcyonFooterBottom"],
  halcyonFooter: ["halcyonFooter"],
  halcyonFooterBottom: ["halcyonFooterBottom"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewsletterRegistration__ArgProps,
          internalVariantPropNames: PlasmicNewsletterRegistration__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewsletterRegistration__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewsletterRegistration";
  } else {
    func.displayName = `PlasmicNewsletterRegistration.${nodeName}`;
  }
  return func;
}

export const PlasmicNewsletterRegistration = Object.assign(
  // Top-level PlasmicNewsletterRegistration renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    halcyonNavBar: makeNodeComponent("halcyonNavBar"),
    mainSection: makeNodeComponent("mainSection"),
    mainSection2: makeNodeComponent("mainSection2"),
    columns: makeNodeComponent("columns"),
    container4: makeNodeComponent("container4"),
    registrationForm: makeNodeComponent("registrationForm"),
    numberInput: makeNodeComponent("numberInput"),
    firstName: makeNodeComponent("firstName"),
    input2: makeNodeComponent("input2"),
    lastName: makeNodeComponent("lastName"),
    input3: makeNodeComponent("input3"),
    email: makeNodeComponent("email"),
    input: makeNodeComponent("input"),
    input4: makeNodeComponent("input4"),
    checkbox2: makeNodeComponent("checkbox2"),
    img: makeNodeComponent("img"),
    container5: makeNodeComponent("container5"),
    registrationForm2: makeNodeComponent("registrationForm2"),
    numberInput2: makeNodeComponent("numberInput2"),
    firstName2: makeNodeComponent("firstName2"),
    input5: makeNodeComponent("input5"),
    lastName2: makeNodeComponent("lastName2"),
    input6: makeNodeComponent("input6"),
    email2: makeNodeComponent("email2"),
    input7: makeNodeComponent("input7"),
    input8: makeNodeComponent("input8"),
    checkbox3: makeNodeComponent("checkbox3"),
    freeBox: makeNodeComponent("freeBox"),
    halcyonFooter: makeNodeComponent("halcyonFooter"),
    halcyonFooterBottom: makeNodeComponent("halcyonFooterBottom"),
    // Metadata about props expected for PlasmicNewsletterRegistration
    internalVariantProps: PlasmicNewsletterRegistration__VariantProps,
    internalArgProps: PlasmicNewsletterRegistration__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Halycon Studios Announcements",
      description:
        "Sign up to receive grand opening information, early registration discount codes and exclusive updates.",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewsletterRegistration;
/* prettier-ignore-end */
