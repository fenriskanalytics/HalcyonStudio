// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2p9VhVhxAWhB5Nusx9QUQ2
// Component: RpZs2qfsI2pw
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useDollarState,
  usePlasmicTranslator
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { RichCalendar } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-calendar";
import { calendarHelpers as RichCalendar_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-calendar";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 2p9VhVhxAWhB5Nusx9QUQ2/projectcss
import sty from "./PlasmicCalendar.module.css"; // plasmic-import: RpZs2qfsI2pw/css

createPlasmicElementProxy;

export const PlasmicCalendar__VariantProps = new Array();

export const PlasmicCalendar__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCalendar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $translator = usePlasmicTranslator?.();
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "calendar2.mode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "month",
        onMutate: generateOnMutateForSpec("mode", RichCalendar_Helpers)
      },
      {
        path: "calendar2.selectedDate",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedDate", RichCalendar_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (() => {
    const child$Props = {
      className: classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.calendar2
      ),
      mode: generateStateValueProp($state, ["calendar2", "mode"]),
      onChange: generateStateOnChangePropForCodeComponents(
        $state,
        "selectedDate",
        ["calendar2", "selectedDate"],
        RichCalendar_Helpers
      ),
      onPanelChange: generateStateOnChangePropForCodeComponents(
        $state,
        "mode",
        ["calendar2", "mode"],
        RichCalendar_Helpers
      ),
      value: generateStateValueProp($state, ["calendar2", "selectedDate"])
    };
    initializeCodeComponentStates(
      $state,
      [
        {
          name: "mode",
          plasmicStateName: "calendar2.mode"
        },
        {
          name: "selectedDate",
          plasmicStateName: "calendar2.selectedDate"
        }
      ],

      [],
      RichCalendar_Helpers ?? {},
      child$Props
    );
    return (
      <RichCalendar
        data-plasmic-name={"calendar2"}
        data-plasmic-override={overrides.calendar2}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        {...child$Props}
      />
    );
  })();
}

const PlasmicDescendants = {
  calendar2: ["calendar2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCalendar__ArgProps,
          internalVariantPropNames: PlasmicCalendar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCalendar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "calendar2") {
    func.displayName = "PlasmicCalendar";
  } else {
    func.displayName = `PlasmicCalendar.${nodeName}`;
  }
  return func;
}

export const PlasmicCalendar = Object.assign(
  // Top-level PlasmicCalendar renders the root element
  makeNodeComponent("calendar2"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicCalendar
    internalVariantProps: PlasmicCalendar__VariantProps,
    internalArgProps: PlasmicCalendar__ArgProps
  }
);

export default PlasmicCalendar;
/* prettier-ignore-end */
